// Структура данных: Бинарное дерево (Binary Tree)

// Бинарное дерево - это структура данных, где каждый узел  также является деревом, то есть структура рекурсивная,
// и основная суть в том, что у каждого узла может быть 2 потомка.
// Добавляются эти узлы тоже особым способом: если добавляемое в дерево значение меньше по значению чем текущий угол,
// то значение уходит в левое поддерево, если больше, то уходит в правое. И так получается, что правая часть поддерева выстраивается с большими
// значениями, а левая с меньшими. И это дерево называется бинарным деревом поиска, поскольку аналогично бинарному алгоритму поиска
// здесь можно находить данные за логарифмическое время.

class BinaryTree {
  constructor() {
    this.root = null;
  }

  add(value) {
    // Если корневой элемент не существует, тогда необходимо его проинициализировать.
    if (!this.root) {
      this.root = new TreeNode(value);
    } else {
      let node = this.root;
      let newNode = new TreeNode(value);

      //   Крутимся пока node не равен пустому значанию
      while (node) {
        //  Если значение больше чем значение ноды, то мы уйдем в правое поддерево, в обратном случае уйдем в левое поддерево
        if (value > node.value) {
          // Если правого поддерева нет, то остановим цикл
          if (!node.right) {
            break;
          }
          node = node.right;
        } else {
          if (!node.left) {
            break;
          }
          node = node.left;
        }
      }

      //   Таким образом после цикла мы имеем ноду которая находится в самом низу цикла
      // Опять делаем проверку значения
      if (value > node.value) {
        node.right = newNode;
      } else {
        node.left = newNode;
      }
    }
  }

  //  Рекурсивная ф-ия print
  print(root = this.root) {
    // Любая рекурсивная ф-ия должна иметь условия выхода из этой рекурсии
    if (!root) {
      return true;
    }
    console.log(root.value);
    this.print(root.left);
    this.print(root.right);
  }
}

// Создаем узела
class TreeNode {
  constructor(value) {
    this.value = value;
    // Создаем ссылку на элемент кторый находится в левой части дерева
    this.left = null;
    // Создаем ссылку на элемент кторый находится в правой части дерева
    this.right = null;
  }
}

const tree = new BinaryTree();
tree.add(5);
tree.add(2);
tree.add(6);
tree.add(2);
tree.add(1);
tree.print();
